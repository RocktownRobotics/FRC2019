/**
	This is a subprogram that would actually run the Commands and do something. We had one of these
for each discrete set of Autonomous movements, each making no decisions (that was handled by larger
programs, not command groups like this one) but containing all the relevant distances and values 
to consistently perform whatever action the subprogram did. Note that most of the values were actually
in OI.
*/

package org.usfirst.frc.team3274.robot.commands.autonomous.groups;

import org.usfirst.frc.team3274.robot.Robot;
import org.usfirst.frc.team3274.robot.RobotMap;
import org.usfirst.frc.team3274.robot.commands.Eject;
import org.usfirst.frc.team3274.robot.commands.Interrupt;
import org.usfirst.frc.team3274.robot.commands.Suck;
import org.usfirst.frc.team3274.robot.commands.autonomous.DriveBackward;
import org.usfirst.frc.team3274.robot.commands.autonomous.DriveForward;
import org.usfirst.frc.team3274.robot.commands.autonomous.SetHeightByGuesstimate;
import org.usfirst.frc.team3274.robot.commands.autonomous.TurnRobot;

import edu.wpi.first.wpilibj.command.CommandGroup;

public class RightScaleToCubeToSwitch extends CommandGroup {

	/**
	 * Here is how you would make the robot drive forward 3 feet and then turn left
	 * 90 degrees. NOPE
	 */
	public RightScaleToCubeToSwitch() {
		
		addSequential(new TurnRobot(-45));
		addSequential(new DriveForward(1));
		addSequential(new TurnRobot(-90));
		addSequential(new DriveForward(7));
		addSequential(new Suck(), RobotMap.Autonomous.SUCK_DURATION);
		addSequential(new DriveBackward(1));
		addSequential(new SetHeightByGuesstimate(RobotMap.Autonomous.SWITCH_RAISE_HEIGHT));
		addSequential(new DriveForward(1));
		addSequential(new Eject(), RobotMap.Autonomous.EJECT_DURATION);
		addSequential(new Interrupt(Robot.kForkLift));
		System.out.println("Robot has seized both Scale and Switch, and is joyous. Hopefullynot joyously delusional...");
		
	}
}
